input {
    file {
        path => '${ES_GEONAMES_FILE}'
        start_position => "beginning"
        sincedb_path => "/dev/null"
    }
}

filter {
    grok {
        match => {"message" => "%{INT:GeonamesId}	%{DATA:Name}	%{DATA:ASCIIName}	%{DATA:AlternateNames}	%{DATA:Latitude}	%{DATA:Longitude}	%{DATA:FeatureClass}	%{DATA:FeatureCode}	%{DATA:CountryCode}	%{DATA:CountryCodeAlternatives}	%{DATA:Admin1Code}	%{DATA:Admin2Code}	%{DATA:Admin3Code}	%{DATA:Admin4Code}	%{DATA:Population}	%{DATA:Elevation}	%{DATA:DEM}	%{DATA:Timezone}	%{GREEDYDATA:ModificationDate}"}
        tag_on_failure => ['grok-failed']
    }

    date {
        locale => "en"
        match => ["ModificationDate", "YYYY-MM-dd"]
        timezone => "UTC"
        target => "ModificationDate"
    }

    mutate {
        convert => { "Latitude" => "float" }
        convert => { "Longitude" => "float" }
        convert => { "Population" => "integer" }
        convert => { "Elevation" => "integer" }
        add_field => { "Feature" => "%{FeatureClass}.%{FeatureCode}" }
    }

    if [Latitude]{
        mutate {
            add_field => {
                "[geom_location][lat]" => "%{Latitude}"
                "[geom_location][lon]" => "%{Longitude}"
            }
        }
    }

    if [Latitude]{
        mutate {
            add_field => {
                "[geom_point][type]" => "point"
                "[geom_point][coordinates]" => ['%{Longitude}', '%{Latitude}']
            }
        }
    }

    if [AlternateNames]{
        mutate {
            split => { "AlternateNames" => "," }
        }
    }
    if [CountryCodeAlternatives]{
        mutate {
            split => { "CountryCodeAlternatives" => "," }
        }
    }

    translate {
        dictionary_path => '${ES_GEONAMES_CACHE_FEATURECODES}'
        field => "Feature"
        destination => "FeatureName"
    }

    if [CountryCode]{
        translate {
            dictionary_path => '${ES_GEONAMES_CACHE_ISOCODES}'
            field => "CountryCode"
            destination => "CountryName"
        }
    }

    translate {
        dictionary_path => '${ES_GEONAMES_CACHE_COUNTRYID}'
        field => "GeonamesId"
        add_tag => ["country"]
    }

    if [FeatureClass] == 'P' {
        mutate {
            add_tag => ["city"]
        }
        if [FeatureCode] == 'PPLC' {
            mutate {
                add_tag => ["capital"]
            }
        }
    }

    if [Population] == 0 {
        mutate {
            add_tag => ["pop-e0"]
        }
    }

    if [FeatureName] == 'L.CONT' {
        mutate {
            add_tag => ["continent"]
        }
    }

    if [CountryCode] and [Admin1Code]{
        mutate{
            add_field => { "Admin1CodeHash" => "%{CountryCode}.%{Admin1Code}" }
            add_field => { "AdminCodeHash" => "%{CountryCode}.%{Admin1Code}" }
        }

        translate {
            dictionary_path => '${ES_GEONAMES_CACHE_ADMIN1FEATURE}'
            field => "Admin1CodeHash"
            destination => "Admin1NameDelimited"
        }

        if [Admin1NameDelimited]{
            mutate {
                split => {"Admin1NameDelimited" => "__"}
            }
            mutate {
                add_field => { "Admin1Name" => "%{[Admin1NameDelimited][0]}" }
                add_field => { "ASCIIAdmin1Name" => "%{[Admin1NameDelimited][1]}" }
            }
        }

        if [Admin2Code]{
            mutate{
                add_field => { "Admin2CodeHash" => "%{CountryCode}.%{Admin1Code}.%{Admin2Code}" }
                add_field => { "AdminCodeHash" => "%{CountryCode}.%{Admin1Code}.%{Admin2Code}" }
            }

            translate {
                dictionary_path => '${ES_GEONAMES_CACHE_ADMIN2FEATURE}'
                field => "Admin2CodeHash"
                destination => "Admin2NameDelimited"
            }

            if [Admin2NameDelimited]{
                mutate {
                    split => {"Admin2NameDelimited" => "__"}
                }
                mutate {
                    add_field => { "Admin2Name" => "%{[Admin2NameDelimited][0]}" }
                    add_field => { "ASCIIAdmin2Name" => "%{[Admin2NameDelimited][1]}" }
                }
            }
        }
    }

    translate {
        dictionary_path => '${ES_GEONAMES_CACHE_ADMIN1ID}'
        field => "GeonamesId"
        add_tag => ["region", "region1"]
    }

    translate {
        dictionary_path => '${ES_GEONAMES_CACHE_ADMIN2ID}'
        field => "GeonamesId"
        add_tag => ["region", "region2"]
    }

    ruby {
        code => "
           # add all full names into a FullName list
           # create a base name:
           # for objects containing adm2: country, adm2, adm1
           # for objects containing only adm1: country, adm1
           # for objects not containing adms: country

           # then concat the name: country, adm2?, adm1?, name
           # do the same for the alternate names

           fullnames = Array.new
           country = event.get('CountryName') + ', '
           name = event.get('Name')
           adm2 = ''
           adm1 = ''
           if event.get('Admin2Name')
                adm2 = event.get('Admin2Name') + ', '
           end
           if event.get('Admin1Name')
                adm1 = event.get('Admin1Name') + ', '
           end

           fn = country + adm2 + adm1 + name
           fullnames.push(fn)

           asciiname = event.get('ASCIIName')
           asciiadm2 = ''
           asciiadm1 = ''
           if event.get('ASCIIAdmin2Name')
                asciiadm2 = event.get('ASCIIAdmin2Name') + ', '
           end
           if event.get('ASCIIAdmin1Name')
                asciiadm1 = event.get('ASCIIAdmin1Name') + ', '
           end

           asciifn = country + asciiadm2 + asciiadm1 + asciiname

           unless fullnames.include? asciifn
                fullnames.push(asciifn)
           end

           if event.get('AlternateNames')
               for an in event.get('AlternateNames')
                    fn = country + adm2 + adm1 + an
                    unless fullnames.include? fn
                        fullnames.push(fn)
                    end
                    asciifn = country + asciiadm2 + asciiadm1 + an
                    unless fullnames.include? asciifn
                        fullnames.push(asciifn)
                    end
               end
           end

           event.set('FullNames', fullnames)

        "
    }


    mutate {
        remove_field => [ "message", "host", "path", "@version", "@timestamp",
                            "Latitude", "Longitude", "Admin1NameDelimited", "Admin2NameDelimited",
                            "Admin2CodeHash", "Admin1CodeHash"]
     }


}

output {
    #stdout {
    #    #codec => rubydebug
    #}

    elasticsearch {
        hosts => ['${ES_GEONAMES_HOST}']
        ssl => true
        ssl_certificate_verification => false
        user => '${ES_GEONAMES_USER}'
        password => '${ES_GEONAMES_PASSWORD}'
        index => '${ES_GEONAMES_INDEX}'
        document_id => '%{GeonamesId}'
        document_type => '_doc'
    }
}
